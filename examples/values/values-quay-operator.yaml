# Quay Operator specific values for the generic operator-olm-v1 Helm chart
# This file demonstrates how to configure the generic chart for a specific operator

# Operator Configuration
name: "quay-operator"
namespace: "quay-operator"

# Operator package details
operator:
  # Specific version of Quay operator
  appVersion: "3.10.13"
  # Quay operator channel
  channel: "stable-3.10"
  # Quay operator package name in the catalog
  packageName: "quay-operator"

# Service Account Configuration
serviceAccount:
  create: true
  name: "installer"
  annotations: {}
  labels: {}

# Cluster Role Configuration
clusterRole:  
  create: true
  name: "installer"
  bind: true
  customRules:    
    # For clusters that use OwnerReferencesPermissionEnforcement, the installer service account must be able to update finalizers on the ClusterExtension
    - apiGroups: [olm.operatorframework.io]
      resources: [clusterextensions/finalizers]
      verbs: [update]
      resourceNames: [quay-operator]
    # Manage Quay CRDs
    - apiGroups: [apiextensions.k8s.io]
      resources: [customresourcedefinitions]
      verbs: [create, list, watch]
    - apiGroups: [apiextensions.k8s.io]
      resources: [customresourcedefinitions]
      verbs: [get, update, patch, delete]
      # Scoped to the Quay CRDs in the bundle
      resourceNames: [quayregistries.quay.redhat.com]
    # ClusterRoles and ClusterRoleBindings
    - apiGroups: [rbac.authorization.k8s.io]
      resources: [clusterroles]
      verbs: [create, list, watch]
    - apiGroups: [rbac.authorization.k8s.io]
      resources: [clusterroles]
      verbs: [get, update, patch, delete]
    #  resourceNames: [<controller cluster role name 1>] # After the operator is installed, the controller cluster role name will be available. (oc get clusterrole | grep quay)
    - apiGroups: [rbac.authorization.k8s.io]
      resources: [clusterrolebindings]
      verbs: [create, list, watch]
    - apiGroups: [rbac.authorization.k8s.io]
      resources: [clusterrolebindings]
      verbs: [get, update, patch, delete]
    #  resourceNames: [<controller cluster rolebinding name 1>] # After the operator is installed, the controller cluster role binding name will be available. (oc get clusterrolebinding | grep quay)

# Additional Cluster Role for RBAC (optional)
clusterRoleRBAC:
  create: true
  name: "installer-rbac"
  bind: true
  customRules:
    - apiGroups: ["quay.redhat.com"]
      resources: ["quayregistries", "quayregistries/status"]
      verbs: ["*"]
    - apiGroups: ["apps"]
      resources: ["deployments"]
      verbs: ["*"]
    - apiGroups: [""]
      resources: ["pods", "services", "secrets", "serviceaccounts", "configmaps", "persistentvolumeclaims", "events"]
      verbs: ["*"]
    - apiGroups: [""]
      resources: ["namespaces"]
      verbs: ["get", "watch", "list", "update", "patch"]
    - apiGroups: ["rbac.authorization.k8s.io"]
      resources: ["roles", "rolebindings"]
      verbs: ["*"]
    - apiGroups: ["route.openshift.io"]
      resources: ["routes", "routes/custom-host"]
      verbs: ["*"]
    - apiGroups: ["autoscaling"]
      resources: ["horizontalpodautoscalers"]
      verbs: ["*"]
    - apiGroups: ["objectbucket.io"]
      resources: ["objectbucketclaims"]
      verbs: ["*"]
    - apiGroups: ["monitoring.coreos.com"]
      resources: ["prometheusrules", "servicemonitors"]
      verbs: ["*"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["*"]

# Cluster Role Binding Configuration
clusterRoleBinding:
  create: true
  name: "installer"
  bind: true

clusterRoleBindingRBAC:
  create: true
  name: "installer-rbac"
  bind: true

# Role Configuration
role:
  create: false
roleRBAC:
  create: false

# Role Binding Configuration
roleBinding:
  create: false
roleBindingRBAC:
  create: false

# Additional Configuration
additionalResources:
  create: false
  resources: []
